#######################################################
# CS:APP Bomb Lab
#######################################################

#gcc version
Target: x86_64-redhat-linux
Thread model: posix
gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) 

#######################################################
#gdb version
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-64.el7
This GDB was configured as "x86_64-redhat-linux-gnu".

#######################################################
#objdump version
GNU objdump version 2.23.52.0.1-30.el7 20130226

#######################################################

1.Ready for disassembly

Get the assembly code file by the command in terminal
objdump -d bomb > bomb64.s

Get strings of bomb
strings bomb > bomb.strings

Open binary file by hexedit
hexedit bomb 

#######################################################

2.Static and Dynamic Analysis bomb
use command "objdump -p bomb" to get Program Header
the bomb start at address 0x0000000000400000 (tips: look more by stack protector)
in hexedit, we can see tha bomb start at 0x00000000, so the real address must be add 0x00400000

#******************************************************
phase_1:

#******************************************************
Static analysis:
#******************************************************

open bomb64.s in vi
go to the function phase_1 at address 0x400ee0
in phase_1, call function of strings_not_equal with two argments,
one is the input_string by argment of phase_1, another is a point to address 0x402400

in hexedit, go to address (0x402400-0x00000000) 0x0002400,
we can see the address point to a string with 0 terminated.

#******************************************************
    42 6F 72 64  65 72 20 72  65 6C 61 74  69 6F 6E 73
    20 77 69 74  68 20 43 61  6E 61 64 61  20 68 61 76
    65 20 6E 65  76 65 72 20  62 65 65 6E  20 62 65 74
    74 65 72 2E  00 00 00 00
#******************************************************

the string is "Border relations with Canada have never been better."

to verify the string, just run the bomb and type the string command line
the phase_1 is passed, get it!

#******************************************************
Dynamic analysis:
#******************************************************

use gdb to debug the bomb, the command is below:
>gdb bomb
>(gdb) break(b) phase_1(*0x400ee0)
>(gdb) run(r)
at here, we type a string whatever, like "test", then break at phase_1
>(gdb) x/s $edi
>(gdb) x/s $esi
show the <input_strings>:   "test"
>(gdb) stepi 2
after instruct mov $0x402400,$esi, the esi point to address 0x402400
>(gdb) x/s $esi
we can see the address 0x402400 point to a string of"Border relations with Canada have never been better.",and is not equal to the string "test", then the function strings_not_equal return 1

instruct "test %eax,%eax" set condition to 1, so "je 0x400ef7" not execute,then call function explode_bomb. the explode_bomb just puts(0x4025a3), puts(0x4025ac), and eixt(8); 

0x4025a3 and 0x4025ac can be look at hexedit with address 0x0025a3, 0x0025ac, or in gdb use commnad x/s 0x4025a3(0x4025ac).
now, we use the correct string(point to 0x402400) replace of "test", phase_1 passed

#******************************************************
phase_2:

#******************************************************
go to function phase_2 at address 0x400efc
in phase_2, call function of read_six_numbers

in function read_six_numbers, point to address 0x4025c3 is a string "%d %d %d %d %d %d",
call sscanf to get six numbers by the input_string, and store in an array.

the inpust_string must be six numbers separate by 0x20(space in ascii), and the sixth number must greater than 0x5

back to phase_2, at address 400f0a, 400f0e, with instruct "cmp $0x1,(%rsp) je 400f30", knonw that the first number must be 0x1

at address 400f30, set %rbx to the next number, set %rbp to the end of array

from address 400f17 to 400f2c, to test the current number is double of the last number in loop second to sixth
if all the six numbers meet the conditions, phase_2 passed

#******************************************************
phase_3:
#******************************************************

in phase_3, by the address 0x4025cf(string: "%d %d"), we know that sscanf to get two numbers by input_string
by the instruct at address 400f60, 400f63, 400f6a, 400f6f,
the second number must be 0 <= second_num <= 7. at address 400f75,
jmp *0x402470(,%rax,8) indirect jump to an address point to 0x402470 by Scaled indexed

the address of 0x402470 is:
#******************************************************
    7C 0F 40 00  00 00 00 00  B9 0F 40 00  00 00 00 00
    83 0F 40 00  00 00 00 00  8A 0F 40 00  00 00 00 00
    91 0F 40 00  00 00 00 00  98 0F 40 00  00 00 00 00
    9F 0F 40 00  00 00 00 00  A6 0F 40 00  00 00 00 00
#******************************************************
the index 0 - 7 point to 0x402470 + (0 - 7) * 8

index 0: 00400f7c, num = 0xcf = 207, solution is (0, 207)
index 1: 00400fb9, num = 0x137 = 311, solution is (1, 311)
index 2: 00400f83, num = 0x2c3 = 707, solution is (2, 707)
index 3: 00400f8a, num = 0x100 = 256, solution is (3, 256)
index 4: 00400f91, num = 0x185 = 389, solution is (4, 389)
index 5: 00400f98, num = 0xce = 206, solution is (5, 206)
index 6: 00400f9f, num = 0x2aa = 682, solution is (6, 682)
index 7: 00400fa6, num = 0x147 = 327, solution is (7, 327)
get it!

#******************************************************
phase_4:
#******************************************************

go to function phase_4 at address 0x40100c
first call sscanf to get two numbers by input_string, and set two numbers to %rsp+8, %rsp+12
the first number must be blow or equal to 0xe

then call function func4, take three argments 0xe, 0x0, %rsp+8(the first number)
func4 is to recursively detect wheather the first number is equal to SAR(Arithmetic right shit)of 0xe,
then SAR of SAR of 0xe, ...

back to phase_4, at address 0x401051, to cmpare the second number(%rsp+c) with 0x0, so the second number is 0

the solution is (7, 0) or (3, 0) or (1, 0)

#******************************************************
phase_5:
#******************************************************

go to function phase_5 at address 0x401062
at address 0x40106a and 0x4010de to 0x4010e9 used stack protector with canary(guard value)

first, call function string_length to make sure length of the input string is 6

at address 0x40108b to 0x4010ac is a loop from index 1 to 6, every time get one char from the input_string,
and take the char in byte, for example ascii char a(0x61), b(0x62) will be 0x1, 0x2 in byte

now take a look at address 0x4024b0:
    6D 61 64 75  69 65 72 73  6E 66 6F 74  76 62 79 6C the following hex values can escape
    m  a  d  u   i  e  r  s   n  f  o  t   v  b  y  l

and addrees 0x40245e:
    21 00 66 6C  79 65 72 73  00 00 00 00  obviously is a string with 0 terminated
    "flyers"

we want to get six char from address 0x4024b0+index(six char in byte from input string),
to construct a string with 0 terminated, and the string should equal to "flyers"

from address 0x4024b0, we can get the six index must be (9 15 14 5 6 7)(in hex: 9 f e 5 6 7)

so the solution is a string with six ascii char, which the low byte with (9 f e 5 6 7)

in ASCII printable code:
such as
    )/.%&'(29 2f 2e 25 26 27)   ionefg(69 6f be 65 66 67)
you can combine every char among (*9 *f *e *5 *6 *7)(* can be 2, 3, 4, 5, 6, 7) by yourself

#******************************************************
phase_5:
#******************************************************

go to function phase_6 at address 0x4010f4
first obviously call function read_six_numbers to get six numbers store in an array by input string

from address 0x401114 to 0x401151, and 0x401135 to 0x40114b, is a double level loop to test if the
six numbers are different to each other

from address 0x401160 to 0x40116d, is a loop to set every number to 7 plus itselft

the next to get six global numbers by the index which is the values of the six numbers,
and test two global numbers, for my poor english, I just take a example here to discrept how to compare

for example:
    the six numbers in an array of nums[6], index of the nums array is 0, 1, 2, 3, 4, 5,
    the six numbers are nums[0]=4, nums[1]=3, nums[2]=2, nums[3]=1 nums[4]=6, nums[5]=5,
    
    after plus 7 are:
    the six numbers are nums[0]=3, nums[1]=4, nums[2]=5, nums[3]=6 nums[4]=1, nums[5]=2,
    
    in gdb, we can get the six global numbers by command "info variables", store at address 0x6032d0
    node1 2 3 4 5 6, the numbers are double word, so number address is 0x6032d0+(n*8), n is from 0 to 5

    we set the six global numbers in an array at address
    (the address of the origin six numbers array add 0x20, 0x28, 0x30, 0x38, 0x40, 0x48) 
    with the values of nums[n]

    array[0]=node3=0x39c
    array[2]=node4=0x2b3
    array[1]=node5=0x1dd
    array[3]=node6=0x1bb
    array[4]=node1=0x14c
    array[5]=node2=0xa8

    0x39c > 0x2b3 > 0x1dd > 0x1bb > 0x14c > 0xa8

the solution is 4 3 2 1 6 5
