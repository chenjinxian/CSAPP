# Execution begins at address 0
	    .pos 0
init:	irmovl Stack, %esp      # Set up stack pointer
        irmovl Stack, %ebp      # Set up base pointer
        call Main               # Execute main program
        halt                    # Terminate program

# List of 3 elements
        .align  4
ele3:   .long   0xc00 
        .long   0x0

        .align  4
ele2:   .long   0xb0 
        .long   ele3

        .align  4
ele1:   .long   0xa 
        .long   ele2

Main:   pushl %ebp
        rrmovl %esp,%ebp
        irmovl $ele1,%edx
        pushl %edx              # Push &ele1
        call sum_list           # sum_list(&ele1)
        rrmovl %ebp,%esp
        popl %ebp
        ret

        # int sum_list(list_ptr ls)
sum_list:
        pushl %ebp
        rrmovl %esp,%ebp
        mrmovl 8(%ebp),%edx     # edx = ls
        xorl %eax,%eax          # sum = 0
        andl %edx,%edx          # Set condition codes
        je End
Loop:   mrmovl (%edx),%esi      # get *ele1
        addl %esi,%eax          # add to sum
        mrmovl 4(%edx),%edx
        andl %edx,%edx          # Set condition codes
        jne Loop                # Stop when 0
End:    rrmovl %ebp,%esp
        popl %ebp
        ret

# The stack starts here and grows to lower addresses
        .pos 0x100
Stack:
